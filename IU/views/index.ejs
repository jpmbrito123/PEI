<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Validation</title>
    <script nonce="undefined" src="https://cdn.zingchart.com/zingchart.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
            color: #343a40;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            height: 100vh;
            margin: 0;
            padding-top: 20px;
            align-items: center;
        }

        .container {
            background-color: #ffffff;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 700px;
        }

        h1 {
            color: #007bff;
            margin-bottom: 1.5rem;
            text-align: center;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }

        textarea {
            width: 95%;
            padding: 0.75rem;
            font-size: 1rem;
            border: 1px solid #ced4da;
            border-radius: 4px;
            margin: 0.75rem auto 1rem; 
            display: block; 
            resize: vertical;
        }


        .button-bar {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1.5rem;
        }

        .button-bar button {
            width: 49%;
            padding: 0.75rem;
            font-size: 1rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .button-bar .active {
            background-color: #007bff;
            color: white;
        }

        .button-bar .inactive {
            background-color: #f1f3f5;
            color: #343a40;
        }

        .button-bar button:hover {
            background-color: #0056b3;
            color: white;
        }

        .analysis-section {
            margin-bottom: 1rem;
        }

        .analysis-card {
            background-color: #f1f3f5;
            padding: 1rem;
            border-radius: 6px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            margin-bottom: 1.5rem;
            display: flex;
            flex-direction: column;
            width: 95%;
        }

        .params {
            margin-left: 1rem;
            margin-top: 0.5rem;
        }

        .param-input {
            width: 90%;
            padding: 0.5rem;
            margin-top: 0.75rem;
            margin-bottom: 0.75rem;
            border: 1px solid #ced4da;
            border-radius: 4px;
        }

        .add-item,
        .remove-item {
            padding: 4px 8px;
            cursor: pointer;
            font-size: 0.9rem;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            transition: background-color 0.2s;
        }

        .remove-item {
            background-color: #dc3545;
        }

        .add-item:hover {
            background-color: #0056b3;
        }

        .remove-item:hover {
            background-color: #c82333;
        }

        .btn {
            display: block;
            width: 100%;
            padding: 0.75rem;
            font-size: 1rem;
            color: #ffffff;
            background-color: #007bff;
            border: none;
            border-radius: 4px;
            text-decoration: none;
            text-align: center;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-top: 1rem;
        }

        .btn:hover {
            background-color: #0056b3;
        }

        .hidden {
            display: none;
        }

        #myChart {
            height: 300px;
            width: 100%;
            min-height: 150px;
            margin-bottom: 20px;
        }

        .chart-wrapper {
            display: flex;
            justify-content: center;
            margin: 20px 0;
            padding: 0;
            width: 100%;
        }


        .zc-ref {
            display: none;
        }

        /* Spinner container */
        #loading-spinner {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            display: none; 
            align-items: center;
            justify-content: center;
            background-color: rgba(255, 255, 255, 0.8);
            z-index: 1000;
            flex-direction: column;
            color: #007bff;
        }

        /* Spinner animation */
        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid rgba(0, 123, 255, 0.2);
            border-top-color: #007bff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 10px;
        }

        #previous_text {
            color: #6c757d;  
            font-style: italic;
            font-size: 0.9rem;
            font-weight: 250;
            margin-bottom: 2px; 
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }
    </style>
</head>
<body>
    <script>ZC.LICENSE = ["569d52cefae586f634c54f86dc99e6a9", "b55b025e438fa8a98e32482b5f768ff5"];

 // Function to render the chart with static values
function renderChart(containerId, value, phrase, analysisType) {
    var myConfig = {
        type: "gauge",
        globals: {
            fontSize: 25
        },
        plotarea: {
            marginTop: 80
        },
        plot: {
            size: '100%',
            valueBox: {
                placement: 'center',
                text: '%V \n' + phrase.toUpperCase(), // Custom phrase in uppercase
                fontSize: 35
            }
        },
        tooltip: {
            borderRadius: 5
        },
        scaleR: {
            aperture: 180,
            minValue: 0,
            maxValue: 100,
            step: 10,
            center: {
                visible: false
            },
            tick: {
                visible: false
            },
            item: {
                offsetR: 0,
                rules: [{
                    rule: '%i == 9',
                    offsetX: 15
                }]
            },
            labels: ['0', '', '', '', '40', '', '60', '', '80', '100'],
            ring: {
                size: 50,
                // Conditional to invert the colors only for "toxicity"
                rules: analysisType === 'DetectToxicity' ? [
                    {
                        rule: '%v < 40',
                        backgroundColor: '#66BB6A' 
                    },
                    {
                        rule: '%v >= 40 && %v < 60',
                        backgroundColor: '#FFA726' 
                    },
                    {
                        rule: '%v >= 60 && %v < 80',
                        backgroundColor: '#EF5350'
                    },
                    {
                        rule: '%v >= 80',
                        backgroundColor: '#E53935' 
                    }
                ] : [
                    {
                        rule: '%v < 40',
                        backgroundColor: '#E53935' 
                    },
                    {
                        rule: '%v >= 40 && %v < 60',
                        backgroundColor: '#EF5350' 
                    },
                    {
                        rule: '%v >= 60 && %v < 80',
                        backgroundColor: '#FFA726'
                    },
                    {
                        rule: '%v >= 80',
                        backgroundColor: '#66BB6A' 
                    }
                ]
            }
        },
        series: [{
            values: [value], // Dynamic value
            backgroundColor: 'black',
            indicator: [10, 10, 10, 10, 0.75],
            animation: {
                effect: 2,
                method: 1,
                sequence: 4,
                speed: 900
            },
        }]
    };

    // Render the chart
    zingchart.render({
        id: containerId,
        data: myConfig,
        height: 500,
        width: '100%'
    });
}


    </script>
    <div class="container">
        <h1>Validation Form</h1>
        <form id="validation-form" action="/" method="POST" onsubmit="validateForm(event)">
            <input type="hidden" name="validationType" id="validation-type" value="input">

            <!-- Button Bar -->
            <div class="button-bar">
                <button type="button" id="validate-input" class="active">Validate Input</button>
                <button type="button" id="validate-output" class="inactive">Validate Output</button>
            </div>

            <!-- Analyses for Input Validation -->
            <div id="input-analyses" class="analysis-section">
                <div>
                    <label for="prompt">Enter the prompt:</label>
                    <textarea name="prompt" id="prompt" rows="4"></textarea>
                </div>

                <div id="previous_text">
                    <% if (previousPrompt) { %>
                        <p></p><strong>Previous Prompt:</strong> <%= previousPrompt %></p>
                    <% } %>
                </div>

                <h3>Select analyses to apply:</h3>

                <% analyses.input.forEach(function(analysis) { %>
                    <div class="analysis-card">
                        <label>
                            <input type="checkbox" name="selectedAnalyses" value="<%= analysis.name %>" onchange="toggleRequiredParams('<%= analysis.name %>_in')" id="<%= analysis.name %>_in">
                            <strong><%= analysis.name %></strong> - <%= analysis.description %>
                        </label>

                        <% if (analysis.params && analysis.params.length > 0) { %>
                            <div class="params" id="params_<%= analysis.name %>_in" style="display: none;">
                                <% analysis.params.forEach(function(param) { %>
                                    <label><%= param.name %> (<%= param.type %>):</label>
                                    <% if (param.type === 'list of strings') { %>
                                        <div class="topic-group">
                                            <div class="list-items">
                                                <input type="text" name="param_<%= analysis.name %>" class="param-input" placeholder="<%= param.description%>" id="param_<%= analysis.name %>_<%= param.name %>">
                                            </div>
                                            <button type="button" class="add-item">Add Topic</button>
                                        </div>
                                    <% } else { %>   
                                        <input type="text" name="param_<%= analysis.name %>" class="param-input" placeholder="<%= param.description %>" id="param_<%= analysis.name %>_<%= param.name %>">
                                    <% } %>
                                <% }); %>
                            </div>
                        <% } %>

                        <% if (results.analyses_results[analysis.name] && results.prompt) { %>
                            <div class="result">
                                <div style="margin-top: 10px; padding: 10px; background-color: #e9f5ff; border: 1px solid #007bff; border-radius: 4px; font-weight: normal; font-size: 1em;">
                                    <strong>Response:</strong> <%= results.analyses_results[analysis.name].message %>
                                </div>
                                <% 
                                var scoreString = results.analyses_results[analysis.name].score.replace(/'/g, '"');
                                if (scoreString !== 'N/A') {
                                    var Score = JSON.parse(scoreString);
                                    Object.keys(Score).forEach(function(ScoreName) { %>
                                        <% var Score_value = Score[ScoreName]; %>
                                        
                                        <div class="chart-wrapper">
                                            <div id="<%= analysis.name %>_<%= ScoreName %>"></div>
                                        </div>
    
                                        <script>
                                            renderChart("<%= analysis.name %>_<%= ScoreName %>", <%= Math.round(Score_value * 100) %>, '<%= ScoreName %> (%)', "<%= analysis.name %>");

                                        </script>
                                    <% });
                                } %>
                            </div>
                        <% } %>
                    </div>
                <% }); %>
            </div>

            <!-- Analyses for Output Validation -->
            <div id="output-analyses" class="analysis-section hidden">
                <div>
                    <label for="response">Enter LLM response:</label>
                    <textarea name="response" id="response" rows="4"></textarea>
                </div>

                <div id="previous_text">
                    <% if (previousResponse) { %>
                        <p></p><strong>Previous response:</strong> <%= previousResponse %></p>
                    <% } %>
                </div>

                <h3>Select analyses to apply:</h3>

                <% analyses.output.forEach(function(analysis) { %>
                    <div class="analysis-card">
                        <label>
                            <input type="checkbox" name="selectedAnalyses" value="<%= analysis.name %>" onchange="toggleRequiredParams('<%= analysis.name %>_out')" id="<%= analysis.name %>_out">
                            <strong><%= analysis.name %></strong> - <%= analysis.description %>
                        </label>

                        <% if (analysis.params && analysis.params.length > 0) { %>
                            <div class="params" id="params_<%= analysis.name %>_out" style="display: none;">
                                <% analysis.params.forEach(function(param) { %>
                                    <label><%= param.name %> (<%= param.type %>):</label>
                                    <% if (param.type === 'list of strings') { %>
                                        <div class="topic-group">
                                            <div class="list-items">
                                                <input type="text" name="param_<%= analysis.name %>" class="param-input" placeholder="<%= param.description%>" id="param_<%= analysis.name %>_<%= param.name %>">
                                            </div>
                                            <button type="button" class="add-item">Add Topic</button>
                                        </div>
                                    <% } else { %>   
                                        <input type="text" name="param_<%= analysis.name %>" class="param-input" placeholder="<%= param.description %>" id="param_<%= analysis.name %>_<%= param.name %>">
                                    <% } %>
                                <% }); %>
                            </div>
                        <% } %>

                        <% if (results.analyses_results[analysis.name] && results.response) { %>
                            <div class="result">
                                <div style="margin-top: 10px; padding: 10px; background-color: #e9f5ff; border: 1px solid #007bff; border-radius: 4px; font-weight: normal; font-size: 1em;">
                                    <strong>Response:</strong> <%= results.analyses_results[analysis.name].message %>
                                </div>
                                <% 
                                var scoreString = results.analyses_results[analysis.name].score.replace(/'/g, '"');
                                if (scoreString !== 'N/A' && analysis.name !== 'PromptTemplate'){
                                    var Score = JSON.parse(scoreString);
                                    Object.keys(Score).forEach(function(ScoreName) { %>
                                        <% var Score_value = Score[ScoreName]; %>
                                        
                                        <div class="chart-wrapper">
                                            <div id="<%= analysis.name %>_<%= ScoreName %>"></div>
                                        </div>
    
                                        <script>
                                            renderChart("<%= analysis.name %>_<%= ScoreName %>", <%= Math.round(Score_value * 100) %>, '<%= ScoreName %> (%)', "<%= analysis.name %>");
                                        </script>
                                    <% }); %>
                                <% } else if (analysis.name === 'PromptTemplate') { %>   
                                    <div style="margin-top: 5px; padding: 10px; background-color: #e9f5ff; border: 1px solid #007bff; border-radius: 4px; font-weight: normal; font-size: 1em;">
                                        <strong>Overall similarity:</strong> <%= results.analyses_results[analysis.name].score %>
                                    </div>
                                <% } %>
                            </div>
                        <% } %>
                    </div>
                <% }); %>
            </div>

            <button type="submit" class="btn">Submit</button>
        </form>
    </div>

    <!-- Spinner Element -->
    <div id="loading-spinner">
        <div class="spinner"></div>
        <p>Preparing your results...</p>
    </div>

    <script>
        let inputPrompt = "";  
        let outputResponse = "";  

        function toggleAnalysisOptions(selectedButton) {
            const inputButton = document.getElementById('validate-input');
            const outputButton = document.getElementById('validate-output');
            const inputAnalyses = document.getElementById('input-analyses');
            const outputAnalyses = document.getElementById('output-analyses');
            const promptTextarea = document.getElementById('prompt');
            const responseTextarea = document.getElementById('response');
            const Type = document.getElementById('validation-type');

            if (selectedButton === 'input') {
                Type.value = 'input';
                inputButton.classList.add('active');
                inputButton.classList.remove('inactive');
                outputButton.classList.remove('active');
                outputButton.classList.add('inactive');
                
                inputAnalyses.classList.remove('hidden');
                outputAnalyses.classList.add('hidden');

                promptTextarea.value = inputPrompt;
                promptTextarea.required = true;
                responseTextarea.required = false;

                document.querySelectorAll('#output-analyses input[type="checkbox"]').forEach(checkbox => {
                    checkbox.checked = false;
                });
            } else {
                Type.value = 'output';
                outputButton.classList.add('active');
                outputButton.classList.remove('inactive');
                inputButton.classList.remove('active');
                inputButton.classList.add('inactive');
                
                outputAnalyses.classList.remove('hidden');
                inputAnalyses.classList.add('hidden');

                responseTextarea.value = outputResponse;
                promptTextarea.required = false;
                responseTextarea.required = true;

                document.querySelectorAll('#input-analyses input[type="checkbox"]').forEach(checkbox => {
                    checkbox.checked = false;
                });
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            const inputButton = document.getElementById('validate-input');
            const outputButton = document.getElementById('validate-output');
            const validationType = "<%= validationType %>";
            
            toggleAnalysisOptions(validationType);

            inputButton.addEventListener('click', function () {
                toggleAnalysisOptions('input');
            });
            outputButton.addEventListener('click', function () {
                toggleAnalysisOptions('output');
            });
        });

        document.addEventListener('click', function (event) {
            if (event.target.classList.contains('add-item')) {
                const listContainer = event.target.previousElementSibling;
                const newItem = document.createElement('div');
                newItem.classList.add('list-param-group');
                newItem.innerHTML = `
                    <input type="text" name="${listContainer.querySelector('input').name}" class="param-input" placeholder="Add another string">
                    <button type="button" class="remove-item">X</button>
                `;
                listContainer.appendChild(newItem);
            } else if (event.target.classList.contains('remove-item')) {
                event.target.parentElement.remove();
            }
        });

        // Toggle required parameters based on selected analyses
        function toggleRequiredParams(analysisName) {
            const analysisCheckbox = document.getElementById(analysisName);
            const paramsDiv = document.getElementById(`params_${analysisName}`);
            
            if (!paramsDiv) {
                console.log(analysisName)
                return;
            }

            if (analysisCheckbox.checked) {
                paramsDiv.style.display = "block";
                paramsDiv.querySelectorAll("input").forEach(input => input.required = true);
            } else {
                paramsDiv.style.display = "none";
                paramsDiv.querySelectorAll("input").forEach(input => input.required = false);
            }
        }

        
        document.addEventListener("DOMContentLoaded", function () {
            const validationType = document.getElementById('validation-type').value;
            const selectedAnalysesFromStorage = JSON.parse(localStorage.getItem('selectedAnalyses')) || [];

            // Mark the checkboxes according to the active section (input or output)
            selectedAnalysesFromStorage.forEach(name => {
                // If in the Input section, check the corresponding checkbox
                if (validationType === 'input') {
                    const inputCheckbox = document.querySelector(`input[name="selectedAnalyses"][value="${name}"][id$="_in"]`);
                    if (inputCheckbox) inputCheckbox.checked = true;
                }

                // If in the Output section, check the corresponding checkbox
                if (validationType === 'output') {
                    const outputCheckbox = document.querySelector(`input[name="selectedAnalyses"][value="${name}"][id$="_out"]`);
                    if (outputCheckbox) outputCheckbox.checked = true;
                }
            });

            // Updates the localStorage when the state of the checkboxes changes
            document.querySelectorAll('input[name="selectedAnalyses"]').forEach(check => {
                check.addEventListener('change', () => {
                    const selected = [...document.querySelectorAll('input[name="selectedAnalyses"]:checked')].map(c => c.value);
                    localStorage.setItem('selectedAnalyses', JSON.stringify(selected));
                });
            });
        });



        function validateForm(event) {
            const form = document.getElementById("validation-form");

            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            event.preventDefault(); 
            document.getElementById('loading-spinner').style.display = 'flex';

            inputPrompt = document.getElementById('prompt').value;
            outputResponse = document.getElementById('response').value;
            
            setTimeout(() => {
                form.submit(); 
            }, 1000); 
        }

        window.addEventListener("pageshow", function() {
            document.getElementById('loading-spinner').style.display = 'none';
        });

    </script>
</body>
</html>
